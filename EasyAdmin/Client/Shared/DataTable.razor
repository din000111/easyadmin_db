@typeparam TableItem

<table class="table">
    <thead>
        <tr class="blazor-grid-header">@GridHeader</tr>
    </thead>
    <tbody>
        @foreach (var row in ItemList)
        {
            <tr class="blazor-row-item" style="@row.TableRowStyle" @onclick="() => OnClickRow(row)">@GridRow(row.TableItem)</tr>
        }
    </tbody>
</table>
<div class="pagination btn-group-sm">

    <button class="btn pagebutton btn-info btn" @onclick=@(async () => SetPagerSize("back"))>&laquo;</button>
    <button class="btn pagebutton btn-secondary" @onclick=@(async () => NavigateToPage("previous"))> ← Предыдущая</button>

    @for (int i = startPage; i <= endPage; i++)
    {
        var currentPage = i;
        <button class="btn pagebutton @(currentPage == curPage ? "currentpage" : "")" @onclick="@(() => { updateList(currentPage); StateHasChanged(); })">
            @currentPage
        </button>
    }

    <button class="btn pagebutton btn-secondary" @onclick=@(async () => NavigateToPage("next"))>Следующая →</button>
    <button class="btn pagebutton btn-info" @onclick=@(async () => SetPagerSize("forward"))>&raquo;</button>

    <span class="pagebutton btn btn-link disabled">Страница @curPage из @totalPages</span>
</div>

@functions {

    int totalPages;
    int curPage;
    int pagerSize;

    int startPage;
    int endPage;

    /// <summary>
    /// Header for BlazorGrid.
    /// </summary>
    [Parameter]
    public RenderFragment GridHeader { get; set; }

    /// <summary>
    /// Rows for BlazorGrid.
    /// </summary>
    [Parameter]
    public RenderFragment<TableItem> GridRow { get; set; }

    /// <summary>
    /// The list of item supplied to the BlazorGrid.
    /// </summary>
    [Parameter]
    public IEnumerable<TableItem> Items { get; set; }

    [Parameter]
    public EventCallback<TableItem> OnSelect { get; set; }
    /// <summary>
    /// Size of each page of BlazorGrid. This is a required field.
    /// </summary>
    [Parameter]
    public int PageSize { get; set; }
    public TableItem itemSelected { get; set; }

    List<Row> ItemList = new List<Row>();

    protected override async Task OnInitializedAsync()
    {
        pagerSize = 5;
        curPage = 1;
        if (PageSize == 0)
        {
            PageSize = 10;
        }
        foreach (var item in Items.Skip((curPage - 1) * PageSize).Take(PageSize).ToList())
        {
            var row = new Row()
            {
                TableItem = item,
                TableRowStyle = null,
                IsSelected = false
            };
            ItemList.Add(row);
        }

        totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);

        SetPagerSize("forward");
    }

    public void Refresh(IEnumerable<TableItem> newTableItems)
    {
        Items = newTableItems;
        updateList(curPage);
    }

    public void updateList(int currentPage)
    {
        ItemList.Clear();
        curPage = currentPage;
        foreach (var item in Items.Skip((curPage - 1) * PageSize).Take(PageSize).ToList())
        {
            var row = new Row()
            {
                TableItem = item,
                TableRowStyle = null,
                IsSelected = false
            };
            ItemList.Add(row);
        }
        
        StateHasChanged();
    }
    public void OnClickRow(Row tableItem)
    {
        if (!tableItem.IsSelected)
        {
            ItemList.ForEach(x => x.TableRowStyle = null);
            ItemList.ForEach(x => x.IsSelected = false);
            tableItem.TableRowStyle = "background: #0d5997; color: white";
            tableItem.IsSelected = true;
            itemSelected = tableItem.TableItem;
        }
        else
        {
            tableItem.IsSelected = false;
            ItemList.ForEach(x => x.TableRowStyle = null);
            ItemList.ForEach(x => x.IsSelected = false);
            itemSelected = default(TableItem);
        }
        OnSelect.InvokeAsync(itemSelected);

    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }

        updateList(curPage);
    }
    public class Row
    {
        public string TableRowStyle { get; set; }
        public TableItem TableItem { get; set; }
        public bool IsSelected { get; set; }
    }
}